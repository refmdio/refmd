use api::presentation::{
    http::{auth, documents, files, git, health, markdown, og, plugins, public, shares, tags},
    ws,
};
use utoipa::OpenApi;

#[derive(OpenApi)]
#[openapi(
    paths(
        auth::register,
        auth::login,
        auth::logout,
        auth::me,
        ws::axum_ws_entry,
        tags::list_tags,
        documents::list_documents,
        documents::create_document,
        documents::get_document,
        documents::update_document,
        documents::delete_document,
        documents::get_document_content,
        documents::download_document,
        documents::search_documents,
        documents::get_backlinks,
        documents::get_outgoing_links,
        files::upload_file,
        files::get_file,
        files::get_file_by_name,
        shares::create_share,
        shares::delete_share,
        shares::list_document_shares,
        shares::validate_share_token,
        shares::browse_share,
        shares::list_active_shares,
        shares::list_applicable_shares,
        shares::materialize_folder_share,
        public::publish_document,
        public::unpublish_document,
        public::get_publish_status,
        public::list_user_public_documents,
        public::get_public_by_owner_and_id,
        public::get_public_content_by_owner_and_id,
        git::get_config,
        git::create_or_update_config,
        git::delete_config,
        git::get_status,
        git::get_changes,
        git::get_history,
        git::get_working_diff,
        git::get_commit_diff,
        git::sync_now,
        git::init_repository,
        git::deinit_repository,
        git::ignore_document,
        git::ignore_folder,
        git::get_gitignore_patterns,
        git::add_gitignore_patterns,
        git::check_path_ignored,
        markdown::render_markdown,
        markdown::render_markdown_many,
        og::public_document_og,
        plugins::get_manifest,
        plugins::exec_action,
        plugins::list_records,
        plugins::create_record,
        plugins::update_record,
        plugins::delete_record,
        plugins::get_kv_value,
        plugins::put_kv_value,
        plugins::install_from_url,
        plugins::uninstall,
        plugins::sse_updates,
        health::health,
    ),
    components(schemas(
        auth::RegisterRequest,
        auth::LoginRequest,
        auth::LoginResponse,
        auth::UserResponse,
        tags::TagItem,
        documents::Document,
        documents::DocumentListResponse,
        documents::CreateDocumentRequest,
        documents::UpdateDocumentRequest,
        documents::SearchResult,
        documents::BacklinkInfo,
        documents::BacklinksResponse,
        documents::OutgoingLink,
        documents::OutgoingLinksResponse,
        documents::DocumentArchiveBinary,
        files::UploadFileResponse,
        files::UploadFileMultipart,
        shares::CreateShareRequest,
        shares::CreateShareResponse,
        shares::ShareItem,
        shares::ShareDocumentResponse,
        shares::ShareBrowseTreeItem,
        shares::ShareBrowseResponse,
        shares::ApplicableShareItem,
        shares::ActiveShareItem,
        shares::MaterializeResponse,
        public::PublishResponse,
        public::PublicDocumentSummary,
        git::GitConfigResponse,
        git::CreateGitConfigRequest,
        git::UpdateGitConfigRequest,
        git::GitStatus,
        git::GitSyncRequest,
        git::GitSyncResponse,
        git::GitChangeItem,
        git::GitChangesResponse,
        git::GitCommitItem,
        git::GitHistoryResponse,
        git::GitDiffLineType,
        git::GitDiffLine,
        git::GitDiffResult,
        git::AddPatternsRequest,
        git::CheckIgnoredRequest,
        markdown::RenderOptionsPayload,
        markdown::PlaceholderItemPayload,
        markdown::RenderResponseBody,
        markdown::RenderRequest,
        markdown::RenderManyRequest,
        markdown::RenderManyResponse,
        plugins::ManifestItem,
        plugins::RecordsResponse,
        plugins::CreateRecordBody,
        plugins::UpdateRecordBody,
        plugins::KvValueResponse,
        plugins::KvValueBody,
        plugins::ExecBody,
        plugins::ExecResultResponse,
        plugins::InstallFromUrlBody,
        plugins::InstallResponse,
        plugins::UninstallBody,
        health::HealthResp,
    )),
    tags(
        (name = "Auth", description = "Authentication"),
        (name = "Documents", description = "Documents management"),
        (name = "Files", description = "File management"),
        (name = "Sharing", description = "Document sharing"),
        (name = "Public Documents", description = "Public pages"),
        (name = "Realtime", description = "Yjs WebSocket endpoint (/yjs/:id)"),
        (name = "Git", description = "Git integration"),
        (name = "Markdown", description = "Markdown rendering"),
        (name = "Plugins", description = "Plugins management & data APIs"),
        (name = "Health", description = "System health checks"),
        (name = "OpenGraph", description = "Public metadata endpoints for social previews")
    )
)]
struct ApiDoc;

fn main() {
    let json = ApiDoc::openapi().to_json().expect("serialize OpenAPI JSON");
    println!("{}", json);
}
