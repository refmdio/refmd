/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as appProfileRouteImport } from './routes/(app)/profile'
import { Route as appPluginsRouteImport } from './routes/(app)/plugins'
import { Route as appDashboardRouteImport } from './routes/(app)/dashboard'
import { Route as appVisibilityIndexRouteImport } from './routes/(app)/visibility/index'
import { Route as shareShareTokenRouteImport } from './routes/(share)/share/$token'
import { Route as authAuthSignupRouteImport } from './routes/(auth)/auth/signup'
import { Route as authAuthSigninRouteImport } from './routes/(auth)/auth/signin'
import { Route as appDocumentIdRouteImport } from './routes/(app)/document/$id'
import { Route as publicUNameIndexRouteImport } from './routes/(public)/u/$name/index'
import { Route as publicUNameIdRouteImport } from './routes/(public)/u/$name/$id'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const appProfileRoute = appProfileRouteImport.update({
  id: '/(app)/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const appPluginsRoute = appPluginsRouteImport.update({
  id: '/(app)/plugins',
  path: '/plugins',
  getParentRoute: () => rootRouteImport,
} as any)
const appDashboardRoute = appDashboardRouteImport.update({
  id: '/(app)/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const appVisibilityIndexRoute = appVisibilityIndexRouteImport.update({
  id: '/(app)/visibility/',
  path: '/visibility/',
  getParentRoute: () => rootRouteImport,
} as any)
const shareShareTokenRoute = shareShareTokenRouteImport.update({
  id: '/(share)/share/$token',
  path: '/share/$token',
  getParentRoute: () => rootRouteImport,
} as any)
const authAuthSignupRoute = authAuthSignupRouteImport.update({
  id: '/(auth)/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const authAuthSigninRoute = authAuthSigninRouteImport.update({
  id: '/(auth)/auth/signin',
  path: '/auth/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const appDocumentIdRoute = appDocumentIdRouteImport.update({
  id: '/(app)/document/$id',
  path: '/document/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const publicUNameIndexRoute = publicUNameIndexRouteImport.update({
  id: '/(public)/u/$name/',
  path: '/u/$name/',
  getParentRoute: () => rootRouteImport,
} as any)
const publicUNameIdRoute = publicUNameIdRouteImport.update({
  id: '/(public)/u/$name/$id',
  path: '/u/$name/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof appDashboardRoute
  '/plugins': typeof appPluginsRoute
  '/profile': typeof appProfileRoute
  '/document/$id': typeof appDocumentIdRoute
  '/auth/signin': typeof authAuthSigninRoute
  '/auth/signup': typeof authAuthSignupRoute
  '/share/$token': typeof shareShareTokenRoute
  '/visibility': typeof appVisibilityIndexRoute
  '/u/$name/$id': typeof publicUNameIdRoute
  '/u/$name': typeof publicUNameIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof appDashboardRoute
  '/plugins': typeof appPluginsRoute
  '/profile': typeof appProfileRoute
  '/document/$id': typeof appDocumentIdRoute
  '/auth/signin': typeof authAuthSigninRoute
  '/auth/signup': typeof authAuthSignupRoute
  '/share/$token': typeof shareShareTokenRoute
  '/visibility': typeof appVisibilityIndexRoute
  '/u/$name/$id': typeof publicUNameIdRoute
  '/u/$name': typeof publicUNameIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(app)/dashboard': typeof appDashboardRoute
  '/(app)/plugins': typeof appPluginsRoute
  '/(app)/profile': typeof appProfileRoute
  '/(app)/document/$id': typeof appDocumentIdRoute
  '/(auth)/auth/signin': typeof authAuthSigninRoute
  '/(auth)/auth/signup': typeof authAuthSignupRoute
  '/(share)/share/$token': typeof shareShareTokenRoute
  '/(app)/visibility/': typeof appVisibilityIndexRoute
  '/(public)/u/$name/$id': typeof publicUNameIdRoute
  '/(public)/u/$name/': typeof publicUNameIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/plugins'
    | '/profile'
    | '/document/$id'
    | '/auth/signin'
    | '/auth/signup'
    | '/share/$token'
    | '/visibility'
    | '/u/$name/$id'
    | '/u/$name'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/plugins'
    | '/profile'
    | '/document/$id'
    | '/auth/signin'
    | '/auth/signup'
    | '/share/$token'
    | '/visibility'
    | '/u/$name/$id'
    | '/u/$name'
  id:
    | '__root__'
    | '/'
    | '/(app)/dashboard'
    | '/(app)/plugins'
    | '/(app)/profile'
    | '/(app)/document/$id'
    | '/(auth)/auth/signin'
    | '/(auth)/auth/signup'
    | '/(share)/share/$token'
    | '/(app)/visibility/'
    | '/(public)/u/$name/$id'
    | '/(public)/u/$name/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  appDashboardRoute: typeof appDashboardRoute
  appPluginsRoute: typeof appPluginsRoute
  appProfileRoute: typeof appProfileRoute
  appDocumentIdRoute: typeof appDocumentIdRoute
  authAuthSigninRoute: typeof authAuthSigninRoute
  authAuthSignupRoute: typeof authAuthSignupRoute
  shareShareTokenRoute: typeof shareShareTokenRoute
  appVisibilityIndexRoute: typeof appVisibilityIndexRoute
  publicUNameIdRoute: typeof publicUNameIdRoute
  publicUNameIndexRoute: typeof publicUNameIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/profile': {
      id: '/(app)/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof appProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/plugins': {
      id: '/(app)/plugins'
      path: '/plugins'
      fullPath: '/plugins'
      preLoaderRoute: typeof appPluginsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/dashboard': {
      id: '/(app)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof appDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/visibility/': {
      id: '/(app)/visibility/'
      path: '/visibility'
      fullPath: '/visibility'
      preLoaderRoute: typeof appVisibilityIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(share)/share/$token': {
      id: '/(share)/share/$token'
      path: '/share/$token'
      fullPath: '/share/$token'
      preLoaderRoute: typeof shareShareTokenRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/auth/signup': {
      id: '/(auth)/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof authAuthSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/auth/signin': {
      id: '/(auth)/auth/signin'
      path: '/auth/signin'
      fullPath: '/auth/signin'
      preLoaderRoute: typeof authAuthSigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/document/$id': {
      id: '/(app)/document/$id'
      path: '/document/$id'
      fullPath: '/document/$id'
      preLoaderRoute: typeof appDocumentIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(public)/u/$name/': {
      id: '/(public)/u/$name/'
      path: '/u/$name'
      fullPath: '/u/$name'
      preLoaderRoute: typeof publicUNameIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(public)/u/$name/$id': {
      id: '/(public)/u/$name/$id'
      path: '/u/$name/$id'
      fullPath: '/u/$name/$id'
      preLoaderRoute: typeof publicUNameIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  appDashboardRoute: appDashboardRoute,
  appPluginsRoute: appPluginsRoute,
  appProfileRoute: appProfileRoute,
  appDocumentIdRoute: appDocumentIdRoute,
  authAuthSigninRoute: authAuthSigninRoute,
  authAuthSignupRoute: authAuthSignupRoute,
  shareShareTokenRoute: shareShareTokenRoute,
  appVisibilityIndexRoute: appVisibilityIndexRoute,
  publicUNameIdRoute: publicUNameIdRoute,
  publicUNameIndexRoute: publicUNameIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
